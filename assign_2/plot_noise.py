#!/usr/bin/env python3

import rospy
import roslib
import math
import tf
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.path import Path
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from math import sin, cos, pi

class PlotNoise():
    def odom_callback_noisy(self, msg):
        self.msg_noisy = msg
    def odom_callback_perfect(self, msg):
        self.msg_perfect = msg

    def extract_data(self, msg, msg2): 
        # Extract data from the /noisy_odom Odometry messages.
        x = msg.pose.pose.position.x
        y = msg.pose.pose.position.y
        quat = [msg.pose.pose.orientation.x,
                msg.pose.pose.orientation.y,
                msg.pose.pose.orientation.z,
                msg.pose.pose.orientation.w]
        (r, p, theta) = tf.transformations.euler_from_quaternion(quat)

        # Store the data in list for plotting.
        self.noisy_data.append([x, y, theta])
        
        xp = msg2.pose.pose.position.x
        yp = msg2.pose.pose.position.y
        quat = [msg2.pose.pose.orientation.x,
                msg2.pose.pose.orientation.y,
                msg2.pose.pose.orientation.z,
                msg2.pose.pose.orientation.w]
        (r, p, thetap) = tf.transformations.euler_from_quaternion(quat)

        # Store the data in list for plotting.
        self.perfect_data.append([xp, yp, thetap])

    def plot_noise(self, noisy_data, perfect_data):
        # Convert self.noisy_data to a 2D array containing /noisy_odom data.
        data = np.reshape(np.array(noisy_data), (-1, 3))
        datap = np.reshape(np.array(perfect_data), (-1, 3))

        # Create line to plot theta value of odometry data.
        # Plot robot path.
        fig, ax = plt.subplots()
        ax.plot(data[:, 0], data[:, 1], datap[:, 0], datap[:, 1])
        fig.suptitle('Noise generated by /noisy_odom')
        ax.legend(['Noisy odom', 'Perfect odom'])
        plt.xlabel('x Distance (m)')
        plt.ylabel('y Distance (m)')
        plt.show()
    
    def __init__(self):
        self.sub_noisy = rospy.Subscriber("noisy_odom", Odometry, self.odom_callback_noisy) # Set the subscriber.
        self.sub_perfect = rospy.Subscriber("odom", Odometry, self.odom_callback_perfect) # Set the subscriber.
        self.msg_noisy = Odometry() # Instantiate variable that stores the Odometry data from /noisy_odom.
        self.msg_perfect = Odometry() # Instantiate variable that stores the Odometry data from /odom.
        self.noisy_data = [] # Store the /noisy_odom data while driving.
        self.perfect_data = [] # Store the /noisy_odom data while driving.
        self.rate = rospy.Rate(20) # Odometry data is published at rate of 20 Hz.

if __name__ == '__main__':
    # Initialize the plot_noise_node and an instance of the PlotNoise class.
    rospy.init_node('plot_noise_node', anonymous=False)
    path_graph = PlotNoise()
    try:
        # Wait for a bit to get the first message.
        path_graph.rate.sleep()
        while not rospy.is_shutdown():
            # Plot Odometry data.
            path_graph.extract_data(path_graph.msg_noisy, path_graph.msg_perfect)
            path_graph.rate.sleep()
    except rospy.ROSInterruptException:
        pass
    
    # Plot the odometry data.
    path_graph.plot_noise(path_graph.noisy_data, path_graph.perfect_data)
    # Unregister from odometry nodes.
    rospy.loginfo(f"Unregistering from all nodes (Clean shutdown)")
    path_graph.sub_noisy.unregister()
    path_graph.sub_perfect.unregister()

